open Cli_constants
open Core.Std
open Process_util

let cTARGETS_README = String.concat ~sep:"\n" [
  "Targets are: ";
  "  all      removes everything generated by the cs3110 tool";
  "  compile  removes the [_build] directory generated by cs3110 compile";
  "  cms      removes the [_cms] direcory, generated by cs3110 harness";
  "  diff     removes the diff results from resubmissions";
  "  email    removes the automatically generated emails";
  "  harness  removes the [_cms] and [_output] directories";
  "  smoke    removes [_email] and [_nocompile] directories";
  ]

let compile () : unit =
  check_code (Sys.command "ocamlbuild -clean")

let cms () : unit =
  check_code (Sys.command (Format.sprintf "rm -f %s" cCMS_DIR))

let diff () : unit =
  check_code (Sys.command (Format.sprintf "rm -f %s" cDIFF_RESULTS))

let email () : unit =
  check_code (Sys.command (Format.sprintf "rm -rf %s" cEMAIL_DIR))

let harness () : unit =
  let () = check_code (Sys.command (Format.sprintf "rm -rf %s" cCMS_DIR)) in
  check_code (Sys.command (Format.sprintf "rm -rf %s" cHARNESS_DIR))

let smoke () : unit =
  let () = check_code (Sys.command (Format.sprintf "rm -rf %s" cEMAIL_DIR)) in
  check_code (Sys.command (Format.sprintf "rm -rf %s" cNOCOMPILE_DIR))

let command_not_found (target : string) : unit =
  let () = Printf.printf "Invalid option: %s\n%s\n" target cTARGETS_README in
  exit 1

let clean (target : string) : unit =
  begin match target with
    | "all"     -> compile ()
    | "compile" -> compile ()
    | "cms"     -> cms     ()
    | "diff"    -> diff    ()
    | "email"   -> email   ()
    | "harness" -> harness ()
    | "smoke"   -> smoke   ()
    | _         -> command_not_found target
  end

let command =
  Command.basic
    ~summary:"Removes all of the files generated during compilation."
    ~readme:(fun () -> String.concat ~sep:"\n" [
      "The clean command removes all of the automatically generated files and";
      "directories of the cs3110 tool. You can pass a sequence of targets for";
      "cleaning.";
      cTARGETS_README
    ])
    Command.Spec.(empty +> anon (maybe_with_default "compile" ("<target>" %: string)))
    (fun target () -> clean target)
