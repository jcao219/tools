open Cli_util
open Core.Std
open Process_util

let targets_readme = String.concat ~sep:"\n" [
  "Targets are: ";
  "  all      removes everything generated by the cs3110 tool";
  "  compile  removes the [_build] directory generated by cs3110 compile";
  "  cms      removes the [_cms] direcory, generated by cs3110 harness";
  "  diff     removes the diff results from resubmissions";
  "  email    removes the automatically generated emails";
  "  harness  removes the [_cms] and [_output] directories";
  "  smoke    removes [_email] and [_nocompile] directories";
  ]

(** [compile_cmd] clean files generated by [cs3110 compile] *)
let compile_cmd (_ : Cli_config.t) : string =
  "ocamlbuild -quiet -clean"

(** [cms_cmd] clean files generated by [cs3110 cms] *)
let cms_cmd (cfg : Cli_config.t) : string     =
  Format.sprintf "rm -f %s"
    cfg.cms.output_spreadsheet

(** [diff_cmd] clean files generated by [cs3110 diff] *)
let diff_cmd (cfg : Cli_config.t) : string    =
  Format.sprintf "rm -rf %s %s"
    cfg.diff.nocompile_directory
    cfg.diff.output_spreadsheet

(** [email_cmd] clean generated emails *)
let email_cmd (cfg : Cli_config.t) : string   =
  Format.sprintf "rm -rf %s"
    cfg.email.input_directory

(** [harness_cmd] clean files generated by [cs3110 harness] *)
let harness_cmd (cfg : Cli_config.t) : string =
  Format.sprintf "rm -rf %s %s"
    cfg.harness.output_spreadsheet
    cfg.harness.output_directory

(** [smoke_cmd] clean generated emails and no-compiles, i.e. files saved
    by [cs3110 smoke] *)
let smoke_cmd (cfg : Cli_config.t) : string   =
  Format.sprintf "rm -rf %s %s"
    cfg.smoke.email_directory
    cfg.smoke.nocompile_directory

(** [test_cmd] clean files generated by running unit tests. *)
let test_cmd (cfg : Cli_config.t) : string    =
  Format.sprintf "rm -rf %s %s"
    Cli_config.cPA_OUNIT_LOGFILE
    cfg.harness.temporary_failures_file

(** [command_not_found t] Print a 'not found' message for [t], return a system
    command that will give a nonzero exit status when run. *)
let command_not_found (target : string) : string =
  let () = Printf.printf "[clean] Invalid option: '%s'.\n%s\n" target targets_readme in
  "false"

(** [clean_dir_command d] if [d] is a directory, visit [d], clean the build/compile, leave.
    Otherwise print an error message. *)
let clean_dir_cmd (cfg : Cli_config.t) (dir : string) : string =
  begin match Sys.is_directory dir with
    | `Yes           ->
      Format.sprintf
        "cd %s; %s; cd %s"
        dir
        (compile_cmd cfg)
        (Sys.getcwd ())
    | `No | `Unknown ->
      command_not_found dir
  end

(** [clean v? d? t] Clean the files/folders generated by the target [t]. If [t]
    is a directory, clean the compiled files inside it. When [v] is high, print
    debugging information. When [d] is set, change into that directory before
    cleaning. The option [d] is more for internal calls than command-line use. *)
let clean ?(verbose=false) ?dir ?config (target : string) : int =
  let cfg = begin match config with
              | Some cfg    -> cfg
              | None        -> Cli_config.init ()
            end
  in
  let cwd = Sys.getcwd () in
  let ()  = Sys.chdir (Option.value ~default:cwd dir) in
  let ()  = if verbose then Format.printf "%![clean] Cleaning target '%s'.\n" target in
  let cmd =
    begin match target with
      | "all"     -> compile_cmd   cfg
      | "compile" -> compile_cmd   cfg
      | "cms"     -> cms_cmd       cfg
      | "diff"    -> diff_cmd      cfg
      | "email"   -> email_cmd     cfg
      | "harness" -> harness_cmd   cfg
      | "smoke"   -> smoke_cmd     cfg
      | "test"    -> test_cmd      cfg
      | _         -> clean_dir_cmd cfg target
    end
  in
  let ()        = if verbose then Format.printf "[clean] Executing command '%s'.\n%!" cmd in
  let exit_code = Sys.command cmd in
  let ()        = Sys.chdir cwd in
  exit_code

let command =
  Command.basic
    ~summary:"Removes all of the files generated during compilation."
    ~readme:(fun () -> String.concat ~sep:"\n" [
      "The clean command removes all of the automatically generated files and";
      "directories of the cs3110 tool. You can pass a sequence of targets for";
      "cleaning (i.e., commands to clean up after), or directories to visit";
      targets_readme
    ])
    Command.Spec.(
      empty
      +> flag ~aliases:["-v"] "-verbose" no_arg ~doc:" Print debugging information."
      +> anon (maybe_with_default ["compile"] (sequence ("<target>" %: string)))
    )
    (fun v targets () ->
      let cfg = Cli_config.init () in
      List.iter
        ~f:(fun tgt -> check_code (clean ~verbose:v ~config:cfg tgt))
        targets
    )
