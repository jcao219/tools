open Core.Std
open Cli_constants
open Io_util
open Filepath_util

type options = { verbose : bool }

(** [get_bcc ()] find the addresses to bcc on all emails,
    format them for the email script. For [mutt], each bcc is set
    by the flag [-b 'address']. Multiple bcc's require multiple [-b]
    flags. *)
let get_bcc () : string =
  begin match Sys.file_exists cEMAIL_ADMINS with
    | `Yes ->
       Format.sprintf "-b '%s'" (String.concat ~sep:" -b "
         (In_channel.with_file cEMAIL_ADMINS ~f:In_channel.input_lines))
    | `No | `Unknown -> ""
  end

(** [get_recipient fname] generate an email address from a message file. *)
let get_recipient (msg_file : string) : string =
  (* Filenames should be [netid.txt], where [netid] is a
     valid Cornell net id *)
  (strip_suffix msg_file) ^ "@cornell.edu"

(** [print_results pass fail] pretty-print details on the number
    of emails sent. *)
let print_results (num_success:int) (num_failure:int) =
  let total = num_success + num_failure in
  Format.printf
    "Emailing complete! Attempted to send %d messages.\n\
     - %d sent successfully.\n\
     - %d failed to send.\n"
    total num_success num_failure

(** [send_one_email o f b] Send the email message in file [f]
    to the recipient determined by [f] and with bcc's [b].
    The options [o] change behavior a little. See the command readme. *)
let send_one_email (opts : options) (msg_file : string) (bcc : string) : bool =
  let recipient = get_recipient msg_file in
  let cmd = Format.sprintf "mutt -s '%s' %s '%s' < %s/%s"
    cEMAIL_SUBJECT
    bcc
    recipient
    cEMAIL_DIR
    msg_file
  in
  let () = if opts.verbose then Format.printf "[cs3110 email] Executing '%s'\n%!" cmd in
  (* Print a message if command failed *)
  ((Sys.command cmd) = 0) ||
    (Format.printf "Failed to send message to: '%s'\n" recipient; false)

(** [send_all_emails b ms] Send all messages in the collection [ms]
    with bcc's [b]. *)
let send_all_emails (opts : options) (bcc : string) (message_files : string array) : unit =
  let num_success, num_failure =
    Array.fold
      message_files
      ~init:(0,0)
      ~f:(fun (num_success,num_failure) (msg_file : string) ->
       if send_one_email opts msg_file bcc
       then num_success+1 , num_failure
       else num_success   , num_failure+1)
  in
  print_results num_success num_failure

let email (verbose:bool) () : unit =
  (* TODO use config file *)
  let () = assert_file_exists cEMAIL_DIR in
  let options = {
    verbose = verbose
  } in
  send_all_emails options (get_bcc ()) (Sys.readdir cEMAIL_DIR)

let command =
  Command.basic
    ~summary:"Send emails generated by [cs3110 smoke]"
    ~readme:(fun () -> String.concat ~sep:"\n" [
       "Collects the email messages generated by [cs3110 smoke] and sends them";
       "to students. Course administrators are included as bcc's in the emails.";
       "Prints a warning if a message fails to send and records the total";
       "number of messages sent."
     ])
    Command.Spec.(
      empty
      +> flag ~aliases:["-v"] "-verbose" no_arg ~doc:" Print debugging information.")
    email
